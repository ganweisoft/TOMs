name: .NET Core Build and Release
on:
  push:
    tags:
      - 'v*'
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  source-checkout:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with: 
        submodules: recursive

  host_build:
    needs: source-checkout
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore ./subrepos/GrpcServer/src/IoTCenterHost.sln

    - name: Build
      run: dotnet build ./subrepos/GrpcServer/src/IoTCenterHost.sln --self-contained false --configuration Debug --no-restore --output ./release/bin

    - name: Data Config(Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd ./release
        cp -rf ../subrepos/GrpcServer/src/config/* ./
        cd ..
      shell: bash
      
    - name: Data Config(Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd ./release
        xcopy /E /I ..\subrepos\GrpcServer\src\config\* .\
        cd ..
      shell: powershell
  
  api_build:
    needs: source-checkout
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore ./subrepos/WebPlugins/src/back-end/IoTCenterWebApi.sln

    - name: Build
      run: dotnet build ./subrepos/WebPlugins/src/back-end/IoTCenterWebApi/IoTCenterWebApi.csproj --self-contained false --configuration Debug --no-restore --output ./release/IoTCenterWeb/publish

  plugins_build:
    needs: source-checkout
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Build
      run: dotnet build ./subrepos/WebPlugins/src/back-end/IoTCenterWebApi.sln

    - name: Plugins Config(Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd ./release
        cp -rf ../subrepos/WebPlugins/src/back-end/plugins ./
        cd ..
      shell: bash
      
    - name: Data Config(Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd ./release
        xcopy /E /I ..\subrepos\WebPlugins\src\back-end\plugins .\
        cd ..
      shell: powershell

  web_base_build:
    needs: source-checkout
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup Node
      uses: actions/setup-dotnet@v4
      with:
        node-version: '23.1.0'
        cache: 'npm'
    - run: |
        cd ./subrepos/WebPlugins/src/front-end/packages/IoTCenterWebBase
        pnpm install
        pnpm build
        cd $GITHUB_WORKSPACE
    
    - name: Web Base Config(Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd ./release
        cp -rf ../subrepos/WebPlugins/src/front-end/packages/IoTCenterWebBase/dist/* ./IoTCenterWeb/publish/wwwroot/
        cd $GITHUB_WORKSPACE
      shell: bash
      
    - name: Data Config(Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd ./release
        xcopy /E /I ..\subrepos\WebPlugins\src\front-end\packages\IoTCenterWebBase\dist .\IoTCenterWeb\publish\wwwroot\
        cd $GITHUB_WORKSPACE
      shell: powershell
  

  web_plugins_build:
    needs: source-checkout
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup Node
      uses: actions/setup-dotnet@v4
      with:
        node-version: '14.21.3'
        cache: 'npm'
    - run: |
        cd ./subrepos/WebPlugins/src/front-end/packages/IoTCenterWebPlugin
        npm install
        npm run build-all
        cd $GITHUB_WORKSPACE
    
    - name: Web Base Config(Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd ./release
        rm -rf ../subrepos/WebPlugins/src/front-end/packages/IoTCenterWebPlugin/dist/static
        cp -rf ../subrepos/WebPlugins/src/front-end/packages/IoTCenterWebPlugin/dist/* ./IoTCenterWeb/publish/wwwroot/
        cd $GITHUB_WORKSPACE
      shell: bash
      
    - name: Data Config(Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if(Test-Path ..\subrepos\WebPlugins\src\front-end\packages\IoTCenterWebPlugin\dist\static){
          Remove-Item ..\subrepos\WebPlugins\src\front-end\packages\IoTCenterWebPlugin\dist\static
        }
        cd ./release
        xcopy /E /I ..\subrepos\WebPlugins\src\front-end\packages\IoTCenterWebPlugin\dist .\IoTCenterWeb\publish\wwwroot\
        cd $GITHUB_WORKSPACE
      shell: powershell

  release_upload:
    needs: [host_build,api_build,plugins_build,web_base_build,web_plugins_build]
    runs-on: ${{ matrix.os }}
    steps: 
    - name: Zip(Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        rm -f release_${{ matrix.os }}.zip
        cd ./release
        zip -r ../release_${{ matrix.os }}.zip .
        cd ..
      shell: bash
      
    - name: Zip(Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if(Test-Path release_${{ matrix.os }}.zip){
          Remove-Item release_${{ matrix.os }}.zip
        }
        cd ./release
        Compress-Archive -Path * -DestinationPath ../release_${{ matrix.os }}.zip -Force
        cd ..
      shell: powershell
      
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./release_${{ matrix.os }}.zip
        asset_name: ${{ github.ref_name }}_${{ runner.os }}_${{ runner.arch }}_release.zip
        asset_content_type: application/zip
